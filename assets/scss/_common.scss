@use "./mixin" as *;

//グーグルフォント読み込み
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap');

/*--------------------------------------------------------------
	html/body及び全体
---------------------------------------------------------------*/
* {
	box-sizing: border-box;
}

html {
	//htmlにフォントサイズを指定することで動的にフォントサイズを変更できる

	//768px以上で1200幅の画面サイズ時に可変値で10px
	@include media(pc) {
		font-size: getvwPc(10);
	}

	//1200px以上では固定値でフォントサイズを16px/0.625 = 10pxにする
	@include media(pc-l) {
		font-size: 62.5%;
	}

	//767px以下で画面幅750pxの時フォントサイズを可変値で20pxにする
	//750 / 2 = 375px 375px→スマホサイズで10pxくらいになる
	@include media(sp) {
		font-size: getvw(20);
	}

}

body {
	color: #222;
	line-height: 1.8;
	font-family: "Noto Sans JP", "Hiragino Sans", "ヒラギノ角ゴ ProN", "Hiragino Kaku Gothic ProN", "游ゴシック", YuGothic, "メイリオ", Meiryo, sans-serif;
	//topへ戻るボタン等を使用するときにbodyに対して位置を決めたいため指定
	position: relative;
	//単語の折り返しをする指定（英語など？）
	word-break: break-word;
	width: 100%;
	font-weight: 400;
	//html要素に指定したフォントサイズを基準とする
	//1200以上では16px固定(16px*0.625*1.6)
	//1199以下768では：1199では10px*1.6remで16pxで画面幅が小さくなるにつれサイズが小さくなる
	font-size: 1.6rem;

	@include media(sp) {
		//767以下768では：20px*1.3=26pxで画面幅が小さくなるにつれサイズが小さくなる
		//375では約13pxになる
		font-size: 1.3rem;
	}
}

.mainSection {
	margin-top: getvwPc(90);

	@include media(pc-l) {
		//1200幅以上で広がりすぎないようにpc-lで固定値指定
		margin-top: 90px;
	}

	@include media(sp) {
		margin-top: getvw(100); //750の半分である375pxで50pxくらいになるように指定
	}

	&__under {
		margin-top: getvwPc(160);

		@include media(pc-l) {
			margin-top: 160px;
		}

		@include media(sp) {
			margin-top: getvw(300);
		}
	}

}

.container {
	overflow: hidden;
}

//==========================================================
// レスポンシブスイッチ
//==========================================================
.pc {
	display: block;

	@include media(sp) {
		display: none;
	}
}

.sp {
	display: none;

	@include media(sp) {
		display: block;
	}
}

//==========================================================
// ボタン
//==========================================================

.btn {
	display: inline-block;
	width: getvwPc(220);
	height: getvwPc(55);
	line-height: 1.5;
	text-align: center;
	text-decoration: none;
	outline: none;
	transition: all 0.3s;
	background-color: $m_color;
	border: 1px solid $m_color;
	color: #fff;
	position: relative;
	display: flex;
	justify-content: center;
	align-items: center;
	margin-top: getvwPc(40);

	@include media(pc-l) {
		//1200幅以上で広がりすぎないようにpc-lで固定値指定
		width: 220px;
		height: 55px;
		margin-top: 40px;
	}

	@include media(sp) {
		width: 60%;
		height: getvw(100);
		margin: getvw(60) auto 0;
	}

	&:after {
		content: "";
		display: inline-block;
		width: getvwPc(8);
		height: getvwPc(8);
		border-top: 1px solid #fff;
		border-right: 1px solid #fff;
		transform: rotate(45deg);
		right: getvwPc(20);
		position: absolute;
		transition: 0.3s;

		@include media(pc-l) {
			width: 8px;
			height: 8px;
			right: 20px;
		}

		@include media(sp) {
			width: getvw(14);
			height: getvw(14);
			right: getvw(30);
		}
	}

	&:hover {
		background-color: #fff;
		border-color: $m_color;
		color: $m_color;

		&:after {
			right: getvwPc(18);
			border-color: $m_color;

			@include media(pc-l) {
				right: 18px;
			}

			@include media(sp) {
				right: getvw(32);
			}
		}
	}

	&--center {
		margin: getvwPc(40) auto 0;

		@include media(pc-l) {
			margin: 40px auto 0;
		}

		@include media(sp) {
			margin: getvw(60) auto 0;
		}
	}
}

//==========================================================
// ホバーアクション
//==========================================================

a img {
	transition: 0.3s;
}

a img:hover {
	opacity: 0.6;
}

//==========================================================
// 幅
//==========================================================

.sec_in {
	//画面サイズ1200の時：1100幅+padding分左右30pxのコンテンツ幅
	max-width: calc(getvwPc(1100) + getvwPc(30) * 2);
	width: 100%;
	margin: 0 auto;
	padding: 0 getvwPc(30);

	@include media(pc-l) {
		//1200以上の時は広がらないように固定値で指定
		padding: 0 30px;
		max-width: calc(1100px + 30px * 2);
	}

	//画面サイズ750の時：w100%+padding分左右40pxのコンテンツ幅で要素がくっつかないように
	//　〃　375の時:w100%+padding分左右20pxのコンテンツ幅
	@include media(sp) {
		width: 100%;
		padding: 0 getvw(40);
	}

	//上記の上下paddingを加えたバージョン
	&.sec_in_bg {
		padding: getvwPc(120) getvwPc(30);

		@include media(pc-l) {
			padding: 120px 30px;
		}

		@include media(sp) {
			padding: getvw(120) getvw(40);
		}
	}
}

//==========================================================
// パンくず
//==========================================================

.topic_path {
	display: flex;
	flex-wrap: wrap;
	margin: getvwPc(10) auto getvwPc(50);
	width: getvwPc(1100);

	@include media(pc-l) {
		width: 1100px;
		margin: 10px auto 50px;
	}

	@include media(sp) {
		width: 100%;
		display: none;
	}

	li {
		margin-right: getvwPc(10);
		font-size: 1.2rem;
		padding-left: getvwPc(15);
		box-sizing: border-box;
		position: relative;

		@include media(pc-l) {
			padding-left: 15px;
			margin-right: 10px;
		}

		@include media(sp) {
			padding-left: getvw(30);
			margin-right: getvw(20);
		}

		&:before {
			content: "";
			display: block;
			width: getvwPc(5);
			height: getvwPc(5);
			border-top: 1px solid $m_color;
			border-right: 1px solid $m_color;
			transform: rotate(45deg);
			position: absolute;
			top: calc(50% - getvwPc(5) / 2);
			left: 0;

			@include media(pc-l) {
				top: calc(50% - 5px / 2);
				width: 5px;
				height: 5px;
			}

			@include media(sp) {
				top: calc(50% - getvwPc(10) / 2);
				width: getvw(10);
				height: getvw(10);
			}
		}

		&:first-child {
			padding-left: 0;

			&:before {
				display: none;
			}
		}

		a {
			display: block;

			&:hover {
				text-decoration: underline;
			}
		}
	}
}

//==========================================================
// スクロールアニメーション
//==========================================================

.inview {
	opacity: 0;
	position: relative;

	&.animate {
		//グーグル用ベンダープレフィックス
		//forwards→元の状態に戻らずアニメーションの最後の状態を維持
		//cubic-bezierで変化の仕方を指定
		-webkit-animation: inview_slide_up 1.3s cubic-bezier(0.165, 0.84, 0.44, 1) forwards 0.2s;
		animation: inview_slide_up 1.3s cubic-bezier(0.165, 0.84, 0.44, 1) forwards 0.2s;
	}
}

.inview-group .inview-list {
	opacity: 0;
	position: relative;

	&.animate {
		-webkit-animation: inview_slide_up 0.7s cubic-bezier(.4, 0, .2, 1) forwards 0.2s;
		animation: inview_slide_up 0.7s cubic-bezier(.4, 0, .2, 1) forwards 0.2s;
	}
}


@-webkit-keyframes inview_slide_up {
	0% {
		transform: translateY(10px)
	}

	100% {
		opacity: 1;
		transform: translateY(0)
	}
}

@keyframes inview_slide_up {
	0% {
		transform: translateY(10px)
	}

	100% {
		opacity: 1;
		transform: translateY(0)
	}
}


//==========================================================
// フォーム関連リセット
//==========================================================

//数値増減ボタンをChromeで削除
input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button {
	-webkit-appearance: none;
	margin: 0;
}

//数値増減ボタンをfirefoxで削除
input[type="number"] {
	-moz-appearance: textfield;
}

//submitのデフォルトスタイルをChromeで削除
input[type=submit] {
	-webkit-appearance: none;
}

textarea {
	resize: none;
	width: auto;
	height: auto;
}


//==========================================================
// 汎用CSS
//==========================================================

section.sec {
	margin-bottom: getvwPc(120);

	@include media(pc-l) {
		margin-bottom: 120px;
	}

	@include media(sp) {
		margin-bottom: getvw(120);
	}
}

.sec_ttl {
	//html要素に可変で指定しているため1200幅以上では56px固定
	//1199以下では56pxから小さくなる
	//フォントサイズは基本1200幅のものをpc基準、
	//767以下を375で表示したいpxの倍を指定すると可変＋固定(1200以上)でしてできる
	font-size: 5.6rem;
	text-align: center;
	line-height: 1.4;
	margin-bottom: getvwPc(80);
	letter-spacing: .05em;

	@include media(pc-l) {
		margin-bottom: 80px;
	}

	@include media(sp) {
		//767以下では60px（20vw=20px*3=60）から小さくなっていく
		font-size: 3rem;
		margin-bottom: getvw(80);
	}

	span {
		display: block;
		font-size: 2rem;

		@include media(sp) {
			font-size: 1.4rem;
		}
	}
}


// タブ ==========================================================

.tab_list {
	display: flex;
	justify-content: space-between;
	margin-bottom: getvwPc(60);

	@include media(pc-l) {
		margin-bottom: 60px;
	}

	@include media(sp) {
		margin-bottom: getvw(60);
	}

	li {
		width: 33.3333333%;
		line-height: 1;
		text-align: center;
		z-index: 3;
		-ms-flex: 1 1 0%;
		-webkit-flex: 1 1 0%;
		flex: 1 1 0%;
		color: #000;
		display: block;
		border: 1px solid #ccc;
		height: getvwPc(70);
		line-height: getvwPc(70);
		border-right: none;
		cursor: pointer;
		transition: .3s;

		@include media(pc-l) {
			height: 70px;
			line-height: 70px;

		}

		@include media(sp) {
			height: getvwPc(140);
			line-height: getvwPc(140);
		}

		&:last-child {
			border-right: 1px solid #ddd;
		}

		&:hover {
			background: #f2f2f2;
		}

		&.active {
			background: #f2f2f2;
		}
	}
}

.panel_group {
	width: 100% !important;

	.panel {
		display: none;
		position: relative;

		&.show {
			display: block;
			-webkit-animation: news_list_animation 1.0s cubic-bezier(0.22, 1, 0.36, 1) 0s;
			animation: news_list_animation 1.0s cubic-bezier(0.22, 1, 0.36, 1) 0s;

		}


		@keyframes news_list_animation {
			0% {
				opacity: 0;
				bottom: -20px;
			}

			100% {
				opacity: 1;
				bottom: 0;
			}
		}
	}
}